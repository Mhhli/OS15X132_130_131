             +--------------------------+
             |     OS15X132_130_131     |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

李树楠 <10132510132@ecnu.edu>
罗澜鑫 <10132510131@ecnu.edu>
李  震 <10132510130@ecnu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Nothing new is defined for argument passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

1) While the program is being loaded, we split the command into list 
of words by space, where the first word is the name of the executable.

2) Then it write the words into the stack one by one in reverse order, 
which makes the executable name in the bottom of the current stack.

3) Then it calculate the starting address of each word, and put them
 in stack in the order of words. After that, it writes "argc" and 
"return address" into stack.

 We avoid overflowing by checking to make sure the argument string 
isn't too long.Before writing to the stack frame, we calculate the size 
that is about to be written into the stack,if it's more than PGSIZE, 
the result is `stack overflow', and the load() function will end with false.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

1) The strtok() is unsafe when used in multi-thread. The strtok() defines
a global variable char *_strtok. When multi-thread use this function at the

same time, the global variable is uncertain.
2) The strtok_r() is reentrant.The strtok_r() uses a pointer *save_ptr to maintain 
context between calls, whereas strtok() uses a global pointer to maintain the context.
Thus strtok_r is thread safe .

In other word, strtok will cause undefined behavior or racing condition if we call 
them from multiple calls while strtok_r() is superior because it can maintain multiple 
contexts at the same time.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Advantages:
1. With the Unix approach, the kernel is smaller. With the microkernel
approach, the kernel is more reliable.
2. Shell support more flexibility of command parse.  Kernel parse command 
will limit the syntax  to particular one (split by space in Pintos). 



                 SYSTEM CALLS
                 ============


---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Add a new child_thread struct in thread.h to hold information about child threads:

struct child_thread {

    	tid_t pid;  
    	- Record thread pid

    	int exit_status; 
	- Record exit status

    	bool exited;
	- Whether the thread running

    	bool waiting;
	- Indicating iff this thread's parent is waiting for it
 
    	struct list_elem elem;
	- List element for children list.
};

Add a new file_desc struct in thread.h to hold information about open files:

struct file_desc {

    	int id;  
	- Record file descriptor

    	struct list_elem elem; 

    	struct file *file;
	- The pointer of file.
};

Add following variables in thread struct in thread.h to hold user process related information:

struct thread {
	//add
    	tid_t parent_pid;
	- Parent process pid
  
    	int load_success;
	- Whether the executable load
  
    	struct file *executable; 
	- Executable file

    	struct list file_descs;
  	- File descriptor list

    	struct list child_threads; 
	- Child thread list
};


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are created when a file is open. Each file descriptor is unique
only within a single process. When the file is closed, the file descriptor is 
also removed. The file_desc struct maps the integer file descriptor to the open
file. The process maintains a list of file_desc structs.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

When reading or writing the user data, it first check the validity of the user pointer, including
- Check for NULL
- Check for unmapped memory
- Check for user virtual address

If user pointer is not valid, it sets the pointer to NULL and call `exit(-1)'.
If user pointer's content is also a pointer, then we need to check validity of 
the content as well. 
If user pointer is a buffer, we need to ensure the whole buffer address is valid.
After that we can do read / write safely.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

If data size is 4096, the least number of inspections is 1, the greatest number of inspections is 2.
If data size is 2, the least number of inspections is 1, the greatest number of inspections is 2.

As long as there are more than one byte, it may happens that one byte is in the first page, and the
rest of bytes in the second page. So there is no room for improvement.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When `wait()' is called by the parent process P, it first tries to find the child process C by its tid, 
if it's not found, returns -1 because C is not a direct child of P. If C is already being waited, also returns -1 immediately.

Then P blocks itself by calling `sema_down', waiting to be unblocked by C while C terminates.
When P wakes up, `wait()' returns the exit status of C.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

A process which tries to read above PHYS_BASE or which otherwise
segfaults will exit with an exit code of -1. When exit is called, it
should free all the necessary blocks and other stuff.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

When process_execute runs, it creates a semaphore with a value of 1 and decrements it.
Then it starts the child process and tries to decrement again. Of course, 
this gets blocked until the semaphore gets incremented, and that only happens after 
load() has been called on the new executable. This ensures that exec does not return 
until load() has been executed. The child thread then blocks to allow the parent 
thread to inspect the child thread's load_status.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

If P calls wait(C) before C exits, it blocks until C exits and unblocks P. C's
thread is freed by the kernel, and C's data in P is freed by P. If P calls 
wait(C) after C exits, C has already updated P's thread with its exit details so
P can just access them and free them when it calls wait. C's thread has already
been freed by the kernel. If P exits before C exits, P updates C's parent PID so
it points to main (C gets orphaned). If P exits after C exits, P effectively
just frees all its information about C.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We used the provided code in the lab, checking that the pointer is in the correct
region and then dereferencing it, handling kernel pagefaults correctly, 
as it suggested that this is faster due to taking advantage of a processor's MMU.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We use a simple file descriptor list, which means that if a process has a lot of
files open it becomes somewhat time consuming to locate the file descriptor.
However, the mapping between ints and file structs is intuitive and simple, so 
working with the file descriptors essentially was not complicated at all. A
helper function that obtained the file_desc struct from file descriptor number
was created to help make operations simpler.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
